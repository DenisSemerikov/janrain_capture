<?php

/**
 * @file
 * This module implements authentication endpoints for Janrain Capture.
 *
 * @see http://www.janrain.com/products/capture
 */

/**
 * Implements hook_init().
 */
function janrain_capture_init() {

  // Don't do anything if the module settings have not been configured.
  if (!janrain_capture_configured()) {
    return;
  }
  $ver = variable_get('janrain_capture_ver', array());
  janrain_capture_ini($ver);
}

function janrain_capture_ini($ver = '1.0') {
  $uri_opts = array('absolute' => TRUE);
  if ($_GET['q']) {
    $uri_opts['query'] = array('destination' => $_GET['q']);
  }
  $settings = array(
    'janrainCapture' => array(
      'profile_sync_url' => url('janrain_capture/profile_sync', $uri_opts),
      'token_expired_url' => url('janrain_capture/token_expired/' . drupal_get_token('janrain_capture_token_expired')),
      'logout_url' => url('user/logout', array('absolute' => TRUE, 'real_logout' => TRUE)),
      'enforce' => variable_get('janrain_capture_enforce', FALSE),
    ),
  );
  if ($ver == '1.0') {
    $janrain_capture_fields   = variable_get('janrain_capture_fields', array());
    $janrain_capture_main     = variable_get('janrain_capture_main', array());
    $janrain_capture_optional = variable_get('janrain_capture_optional', array());
    $capture_sso_address = !empty($janrain_capture_optional['capture_sso_address'])
      ? $janrain_capture_optional['capture_sso_address'] : '';
    if (!empty($janrain_capture_optional['backplane_server'])
        && !empty($janrain_capture_optional['backplane_bus_name'])) {
      $settings['janrainCapture']['backplane_server'] = $janrain_capture_optional['backplane_server'];
      $settings['janrainCapture']['backplane_bus_name'] = $janrain_capture_optional['backplane_bus_name'];
    }
  } else {
    $janrain_capture_fields   = variable_get('janrain_capture_fields2', array());
    $janrain_capture_main     = variable_get('janrain_capture_main2', array());
    $janrain_capture_main     = array_merge($janrain_capture_main, variable_get('janrain_capture_ui2', array()));
    $janrain_capture_optional = variable_get('janrain_capture_federate2', array());
    $janrain_capture_optional = array_merge($janrain_capture_optional, variable_get('janrain_capture_backplane2', array()));
    $capture_sso_address = isset($janrain_capture_optional['capture_sso_enabled'])
      ? $janrain_capture_optional['capture_sso_address'] : '';
    if (isset($janrain_capture_optional['backplane_enabled'])
        && !empty($janrain_capture_optional['backplane_bus_name'])) {
      $settings['janrainCapture']['backplane_enabled'] = $janrain_capture_optional['backplane_enabled'];
      $settings['janrainCapture']['backplane_bus_name'] = $janrain_capture_optional['backplane_bus_name'];
    }
  }
  if (!empty($capture_sso_address)) {
    $settings['janrainCapture']['sso_address'] = $capture_sso_address;
  }
  drupal_add_js($settings, array('type' => 'setting', 'every_page' => TRUE));
  
  $capture_client_id = !empty($janrain_capture_main['capture_client_id'])
    ? $janrain_capture_main['capture_client_id'] : '';
  
  // Add the jQuery BBQ plugin to handle destination redirects.
  drupal_add_library('system', 'jquery.bbq', TRUE);
  
  $scripts = array(
    'file' => array(),
    'inline' => array(),
    'external' => array(),
  );
  $scripts['file'][] = drupal_get_path('module', 'janrain_capture') . '/janrain_capture.js';
  
  // not new or new init
  if($ver == '1.0') {
    if (!empty($capture_sso_address)) {
      $scripts['external'][] = "https://$capture_sso_address/sso.js";
      $scripts['inline'][] = '
      var janrainCaptureClientId ="'. $capture_client_id .'";
      var janrainCaptureRedirectUri ="'. url('janrain_capture/oauth', array('absolute' => TRUE)).'";
      var janrainCaptureLogoutUri ="'. url('user/logout', array('absolute' => TRUE, 'real_logout' => TRUE)).'";
      var janrainCaptureXdReceiver ="'. url(NULL, array('absolute' => TRUE)) . drupal_get_path('module', 'janrain_capture') . '/xdcomm.html";
      
      if(undefined == "'.$janrain_capture_optional['backplane_bus_name'].'") {
  		console.log("Not Federated");
  		JANRAIN.SSO.CAPTURE.check_login({
  			  sso_server: "https://" + Drupal.settings.janrainCapture.sso_address,
  			  client_id: janrainCaptureClientId,
  			  redirect_uri: janrainCaptureRedirectUri,
  			  logout_uri: janrainCaptureLogoutUri,
  			  xd_receiver: janrainCaptureXdReceiver
  			});
      }';
    }

    if (!empty($janrain_capture_optional['backplane_js_path'])) {
      $scripts['external'][] = $janrain_capture_optional['backplane_js_path'];
    }
  
    if (isset($_SESSION['janrain_capture_password_recover']) && $_SESSION['janrain_capture_password_recover'] == TRUE) {
      $url = url('janrain_capture/profile', array(
        'absolute' => TRUE,
        'query' => array(
          'method' => '_change_password',
          'callback' => 'Drupal.janrainCapture.closeRecoverPassword',
        ),
      ));
      $scripts['inline'][] = 'jQuery(function($) {Drupal.janrainCapture.passwordRecover(' . $url .')});';
      $_SESSION['janrain_capture_password_recover'] = FALSE;
    }
  } else {
    $scripts['external'][] = 'https://d7v0k4dt27zlp.cloudfront.net/assets/capture_client.js';
    $scripts['inline'][] = widget_js();
  }
  
  foreach ($scripts['file'] as $s) {
    drupal_add_js($s, array('type' => 'file', 'every_page' => TRUE, 'weight' => 1));
  }
  foreach ($scripts['external'] as $s) {
    drupal_add_js($s, array('type' => 'external', 'every_page' => TRUE, 'weight' => 2));
  }
  foreach ($scripts['inline'] as $s) {
    drupal_add_js($s, array('type' => 'inline', 'every_page' => TRUE, 'weight' => 3));
  }
}

/**
 * Implements hook_menu().
 */
function janrain_capture_menu() {

  $items['janrain_capture/oauth'] = array(
    'title' => 'Capture Oauth Receiver',
    'page callback' => 'janrain_capture_oauth',
    'access callback' => 'user_is_anonymous',
    'type' => MENU_CALLBACK,
    'file' => 'janrain_capture.pages.inc',
  );

  $items['janrain_capture/signin_redirect'] = array(
    'title' => 'Capture redirect page',
    'page callback' => 'janrain_capture_signin_redirect',
    'access callback' => 'user_is_logged_in',
    'type' => MENU_CALLBACK,
    'file' => 'janrain_capture.pages.inc',
  );

  $items['janrain_capture/profile'] = array(
    'title' => 'Capture Profile',
    'page callback' => 'janrain_capture_profile',
    'access callback' => 'user_is_logged_in',
    'type' => MENU_CALLBACK,
    'file' => 'janrain_capture.pages.inc',
  );
  $items['janrain_capture/public_profile'] = array(
    'title' => 'Public Profile',
    'page callback' => 'janrain_capture_public_profile',
    'access callback' => TRUE,
    'type' => MENU_CALLBACK,
    'file' => 'janrain_capture.pages.inc',
  );

  $items['janrain_capture/profile_sync'] = array(
    'title' => 'Capture Profile Receiver',
    'page callback' => 'janrain_capture_profile_sync',
    'access callback' => 'user_is_logged_in',
    'type' => MENU_CALLBACK,
    'file' => 'janrain_capture.pages.inc',
  );

  $items['janrain_capture/resend_verification_email'] = array(
    'title' => 'Capture Verification Email Resent',
    'page callback' => 'janrain_capture_resend_verification_email',
    'access callback' => TRUE,
    'type' => MENU_CALLBACK,
    'file' => 'janrain_capture.pages.inc',
  );

  $janrain_capture_ver = variable_get('janrain_capture_ver', array());
  $ver = !empty($janrain_capture_ver) ? $janrain_capture_ver : '1.0';
  $ver = substr($ver,0,1);
  if($ver == "1") {$ver = '';}

  $items['admin/config/people/janrain_capture'] = array(
    'title' => 'Janrain Capture',
    'description' => t('Connect to Janrain Capture service for centralized storage of social profile data.'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('janrain_capture_settings'),
    'access arguments' => array('administer site configuration'),
    'weight' => -4,
    'file' => "janrain_capture.admin$ver.inc",
  );
  $items['admin/config/people/janrain_capture/settings'] = array(
    'title' => 'Settings',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('janrain_capture_settings'),
    'access arguments' => array('administer site configuration'),
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'weight' => -10,
    'file' => "janrain_capture.admin$ver.inc",
  );
  $items['janrain_capture/token_expired/%'] = array(
    'title' => 'Capture Token Expired',
    'page callback' => 'janrain_capture_token_expired',
    'access callback' => 'janrain_capture_token_expired_access',
    'access arguments' => array(2),
    'type' => MENU_CALLBACK,
    'file' => 'janrain_capture.pages.inc',
  );
  // in case of emergency go here
  $items['admin/config/people/janrain_capture/settings2'] = array(
    'title' => 'Settings',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('janrain_capture_settings'),
    'access arguments' => array('administer site configuration'),
    'weight' => -10,
    'file' => "janrain_capture.admin2.inc",
  );
  $items['admin/config/people/janrain_capture/settings1'] = array(
    'title' => 'Settings',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('janrain_capture_settings'),
    'access arguments' => array('administer site configuration'),
    'weight' => -10,
    'file' => "janrain_capture.admin.inc",
  );
  return $items;
}

/**
 * Access callback for janrain_capture_token_expired().
 */
function janrain_capture_token_expired_access($token) {
  // This path is for authenticated users and is protected from CSRF with a token.
  return user_is_logged_in() && ($token === drupal_get_token('janrain_capture_token_expired'));
}

/**
 * Helper function to determine if a user is associated with a Capture account.
 */
function janrain_capture_mapping_exists($uid) {
  // Check to see if this user is already mapped to a Capture uuid.
  return (bool) db_query("SELECT 1 FROM {authmap} WHERE module = 'janrain_capture' AND uid = :uid", array(':uid' => $uid))->fetchField();
}

/**
 * Checks whether the module has been configured.
 */
function janrain_capture_configured() {
  // Make sure we at least have non-empty values for the basic configuration settings.
  $configured = &drupal_static(__FUNCTION__, NULL);
  if (is_null($configured)) {
    $janrain_capture_main = variable_get('janrain_capture_main', array());
    $address       = isset($janrain_capture_main['capture_address']) && !empty($janrain_capture_main['capture_address']);
    $client_id     = isset($janrain_capture_main['capture_client_id']) && !empty($janrain_capture_main['capture_client_id']);
    $client_secret = isset($janrain_capture_main['capture_client_secret']) && !empty($janrain_capture_main['capture_client_secret']);
    $configured    = $address && $client_id && $client_secret;
    
    // if 1.0 isnt configured try 2.0
    if(!$configured){
      $janrain_capture_main = variable_get('janrain_capture_main2', array());
      $address       = isset($janrain_capture_main['capture_address']) && !empty($janrain_capture_main['capture_address']);
      $client_id     = isset($janrain_capture_main['capture_client_id']) && !empty($janrain_capture_main['capture_client_id']);
      $app_id        = isset($janrain_capture_main['capture_app_id']) && !empty($janrain_capture_main['capture_app_id']);
      $client_secret = isset($janrain_capture_main['capture_client_secret']) && !empty($janrain_capture_main['capture_client_secret']);
      $configured    = $address && $client_id && $client_secret && $app_id;
    }
  }
  return $configured;
}

/**
 * Returns the full URL of a specified CaptureUI screen
 *
 * @param array $options
 *   An associative array of options to use in constructing the URL
 *
 * @return string
 *   The full URL string of the Capture URL screen being requested
 */
function janrain_capture_url($options = NULL) {
  //TODO: set new
  $ver = variable_get('janrain_capture_ver', array());
  if ($ver == '1.0') {
    $janrain_capture_main = variable_get('janrain_capture_main', array());
    $janrain_capture_optional = variable_get('janrain_capture_optional', array());
    if (!empty($janrain_capture_main['capture_address'])
      && !empty($janrain_capture_main['capture_client_id'])) {
  
      $required = array(
        'redirect_uri' => url('janrain_capture/oauth', array('absolute' => TRUE)),
        'xd_receiver' => url(NULL, array('absolute' => TRUE)) . drupal_get_path('module', 'janrain_capture') . '/xdcomm.html',
        'client_id' => $janrain_capture_main['capture_client_id'],
      );
  
      if (!$options || strpos($options['action'], 'profile') !== 0) {
        if (!$options) {
          $options = array();
        }
        $defaults = array(
          'action' => 'signin',
          'recover_password_callback' => 'Drupal.janrainCapture.closeRecoverPassword',
          'response_type' => 'code',
        );
      }
      else {
        $defaults = array(
          'callback' => 'Drupal.janrainCapture.closeProfileEditor',
        );
      }
      $args = array_merge($required, $defaults, $options);
      $action = $args['action'];
      unset($args['action']);
  
      $url = 'https://'
        . (!empty($janrain_capture_optional['captureui_address']) ? $janrain_capture_optional['captureui_address'] : $janrain_capture_main['capture_address'])
        . '/oauth/' . $action . '?' . http_build_query($args, '', '&');
    } else {
      return '';
    }
  } else {
    return '';
  }
  return $url;
}

/**
 * Implements hook_url_outbound_alter().
 */
function janrain_capture_url_outbound_alter(&$path, &$options, $original_path) {
  // Override lougout link
  //var_dump($path);
  switch ($path) {
    case 'user/logout':
      $ver = variable_get('janrain_capture_ver', array());
      if($ver == '1.0'){
        $janrain_capture_optional = variable_get('janrain_capture_optional', array());
        //var_dump($janrain_capture_optional);
        if($janrain_capture_optional['capture_sso_address'] && !isset($options['real_logout'])) {
          $path = 'javascript:CAPTURE.logout()';
          $options['external'] =TRUE;
        }
       }
      break;
  }
}

/**
 * Implements hook_menu_alter().
 */
function janrain_capture_menu_alter(&$items) {
  if (variable_get('janrain_capture_enforce', FALSE)) {
    // Make capture the only way to log in to the site.
    foreach (array('user/login','user/register') as $key) {
      $items[$key]['page callback'] = 'janrain_capture_signin';
      unset($items[$key]['page arguments']);
      unset($items[$key]['file']);
      // Override to be callbacks instead of tabs.
      $items[$key]['type'] = MENU_CALLBACK;
    }
      
    // Let logged in users use the shortcut to their profile.
    $items['user']['access callback'] = 'user_is_logged_in';
    // All password reset requests should go via Capture.
    $items['user/password']['access callback'] = FALSE;
  }
}


/**
 * Menu callback to override user/login and user/register.
 */
function janrain_capture_signin() {
  $url = janrain_capture_url();
  if (isset($_GET['destination'])) {
    $destination = $_GET['destination'];
    // TODO: we have to unset this here because otherwise drupal_goto will just
    // go to the destination, but how can we tell Janrain Capture to redirect to
    // this page afterwards?
    // ??? drupal_get_destination();
    unset($_GET['destination']);
  }
  drupal_goto($url);
}

/**
 * Implements hook_block_view_MODULE_DELTA_alter().
 */
function janrain_capture_block_view_user_login_alter(&$data, $block) {
  if (!janrain_capture_configured()) {
    return;
  }

  if (variable_get('janrain_capture_enforce', FALSE)) {
    // Change the user login block so that instead of presenting a login form it
    // presents the contents of the Janrain Capture block, i.e. a link to login
    // via Capture or, if already logged in, a link to the profile edit screen.

    global $user;
    if (!$user->uid) {
      $data['content'] = janrain_capture_block_content();
    }
  }
}

/**
 * Returns a render array for the 'Register / Sign in' link for Janrain Capture.
 */
function janrain_capture_signin_link() {
  $ver = variable_get('janrain_capture_ver', array());
  if($ver == '1.0') {
    $link = array(
      '#type' => 'link',
      '#title' => t('Register / Sign in'),
      '#href' => janrain_capture_url(),
      '#attributes' => array(
        'class' => array('janrain_capture_anchor', 'janrain_capture_signin'),
      ),
    );
  } else {
    $link = array(
      '#type' => 'link',
      '#title' => t('Register / Sign in'),
      '#href' => janrain_capture_url(),
      '#attributes' => array(
        'onclick' => 'janrain.capture.ui.modal.open(); return false;',
        'class' => array('capture_modal_open'),
      ),
    );
  }
  
  return $link;
}

/**
 * Returns a render array for the 'Edit profile' link for Janrain Capture.
 */
function janrain_capture_profile_link() {
  global $base_url;
  
  $link = array(
    '#type' => 'link',
    '#title' => t('View / Edit Profile'),
    '#href' => 'janrain_capture/profile',
    '#options' => array(
      'absolute' => TRUE,
    ),
    '#attributes' => array(
      'class' => array('janrain_capture_anchor'),
    ),
  );
  
  return $link;
}

/**
 * Generates a 'Logout' link for Janrain Capture.
 */
function janrain_capture_render_logout_link() {
  $ver = variable_get('janrain_capture_ver', array());
  if($ver == '1.0') {
    $janrain_capture_optional = variable_get('janrain_capture_optional', array());
  } else {
    $janrain_capture_optional = variable_get('janrain_capture_federate2', array());
  }
  // TODO: Actually change the logout link
  if($ver == '2.0' && $janrain_capture_optional['capture_sso_enabled'] == 1) {
    $link = '<a href="javascript:CAPTURE.logout();">' . t('Log out') . '</a>';
  } elseif ($ver == '1.0' && $janrain_capture_optional['capture_sso_address'] != '') {
    $link = '<a href="javascript:CAPTURE.logout()">' . t('Log out') . '</a>';
  } else {
    $link = l(t('Log out'), 'user/logout');
  }
 
  return $link;
}

/**
 * Provides the content for the Janrain Capture block, and is also used to
 * replace the user login block content if the "enforce" setting is on.
 */
function janrain_capture_block_content() {
  global $user;
  $items = array();
  // Provide either a "Register / Sign in" link or a "View Profile" link
  // depending on whether the user is logged in.
  $link_type = $user->uid ? 'profile' : 'signin';
  $link_func = sprintf('janrain_capture_%s_link', $link_type);
  $link = $link_func();
  $items[] = drupal_render($link);
  // Add a logout link for logged in users.
  if ($user->uid) {
    $items[] = janrain_capture_render_logout_link();
  }
  return theme('item_list', array('items' => $items));
}

/**
 * Modifies the user account with values from the Janrain Capture profile array.
 *
 * Invokes a hook to allow other modules to modify the account as well.
 *
 * @param $account
 *   The account object to modify with values from the Janrain Capture profile
 * @param array $profile
 *   The Janrain Capture profile array.
 */
function janrain_capture_sync_account($account, $profile) {
  $account->mail = $profile['email'];
  // Set the profile email address as the default username - this can be overridden
  // either by implementing the janrain_capture_profile_sync hook or using the mapping
  // submodule.
  $account->name = $profile['email'];
  // Set the uuid field value from the Capture uuid. Hardcoding LANGUAGE_NONE here
  // should be ok as the field is not translatable.
  $account->field_janrain_capture_uuid[LANGUAGE_NONE][0]['value'] = $profile['uuid'];

  // Map the profile pic if configured to do so. This requires special handling.
  $janrain_capture_fields = variable_get('janrain_capture_fields', array());
  if (isset($janrain_capture_fields['capture_map_profile_pic']) && $janrain_capture_fields['capture_map_profile_pic']) {
    if (!empty($profile['photos'])) {
      $preferred = isset($janrain_capture_fields['capture_preferred_photo_variant']) ? $janrain_capture_fields['capture_preferred_photo_variant'] : 'small';
      foreach($profile['photos'] as $variant) {
        if ($variant['type'] == $preferred) {
          _janrain_capture_update_picture($account, $variant);
          break;
        }
      }
    }
    elseif (!empty($account->picture)) {
      // We have a local picture, but picture was removed on server. Delete!
      $account->picture = new stdClass();
      db_delete('janrain_capture_photos')
        ->condition('uid', $account->uid)
        ->execute();
    }
  }

  module_invoke_all('janrain_capture_profile_sync', $account, $profile);
}

/**
 * Helper function for updating a user picture.
 */
function _janrain_capture_update_picture($account, $variant) {
  $args = array(':uid' => $account->uid, ':uri' => $variant['value']);
  if (empty($account->picture) || (!db_query('SELECT uid FROM {janrain_capture_photos} WHERE uid = :uid and uri = :uri', $args)->fetchField())) {
    // Either first or updated user profile image. Download remote image,
    // save locally and set user picture to this image.
    $image_response = drupal_http_request($variant['value']);
    if (($image_response->code == 200) && !empty($image_response->data)) {
      $image_file = file_save_data($image_response->data);
      if (!empty($image_file)) {
        // Make the file non-permanent, so we can get it moved and
        // renamed as a proper user picture on the righ path. (which
        // happens inside user_save()).
        $image_file->status = 0;
        $image_file = file_save($image_file);
        $account->picture = $image_file;
        // Keep track of the remote image URI so we only download it once.
        db_merge('janrain_capture_photos')
          ->key(array('uid' => $account->uid))
          ->fields(array(
              'uid' => $account->uid,
              'uri' => $variant['value'],
          ))
          ->execute();
      }
    }
  }
}

  /**
   * Outputs Capture widget js.
   */
  function widget_js() {
    global $base_url;
        $uri = explode('?',$_SERVER['REQUEST_URI']);
    $uri = $uri[0];
    $ari = explode('/', $uri);
    if(array_search('system', $ari)
        || array_search('admin', $ari)) {
      return;
    }

    
    $janrain_settings = variable_get('janrain_capture_fields2', array());
    $janrain_settings = array_merge($janrain_settings, variable_get('janrain_capture_main2', array()));
    $janrain_settings = array_merge($janrain_settings, variable_get('janrain_capture_ui2', array()));
    $janrain_settings = array_merge($janrain_settings, variable_get('janrain_capture_federate2', array()));
    $janrain_settings = array_merge($janrain_settings, variable_get('janrain_capture_backplane2', array()));
    
    // capture
    $settings["capture.redirectUri"]        = url('janrain_capture/oauth', array('absolute' => TRUE));
    $settings["capture.appId"]              = $janrain_settings['capture_app_id'];
    $settings["capture.clientId"]           = $janrain_settings['capture_client_id'];
    $settings["capture.responseType"]       = "code";
    $settings["capture.captureServer"]      = $janrain_settings['capture_address'];
    $settings["capture.registerFlow"]       = $janrain_settings['registration_flow'];
    $settings["packages"]                   = '["login","capture"]';
    $settings["capture.recaptchaPublicKey"] = $janrain_settings['recaptcha_key'];
    $settings["capture.loadJsUrl"]          = $janrain_settings['load_js'];
    
    // engage
    $settings["appUrl"]                     = $janrain_settings['engage_address'];
    
    // federate
    $settings["capture.federate"]           = $janrain_settings['capture_sso_enabled'];
    $settings["capture.federateServer"]     = $janrain_settings['capture_sso_address'];
    $settings["capture.federateXdReceiver"] = url(NULL, array('absolute' => TRUE)) . drupal_get_path('module', 'janrain_capture') . '/xdcomm.html';
    $settings["capture.federateLogoutUri"]  = url('user/logout', array('absolute' => TRUE, 'real_logout' => TRUE));
    
    // backplane
    $settings["capture.backplane"]          = $janrain_settings['backplane_enabled'];
    $settings["capture.backplaneBusName"]   = $janrain_settings['backplane_bus_name'];
    
    $folder  = $janrain_settings['screens_folder'];
    $ifolder = $folder;
    // if path is local, convert to local path
    if(strpos($ifolder, $base_url) === 0) {
      $ifolder = str_ireplace($base_url, '', $ifolder);
      $loc_url = str_ireplace('http://'.$_SERVER['SERVER_NAME'], '', $base_url );
      $loc_url = str_ireplace('https://'.$_SERVER['SERVER_NAME'], '', $loc_url );
      $ifolder = getenv("DOCUMENT_ROOT") . $loc_url . $ifolder;
    }
    //TODO: possibly test for fs mode
    if(true) {
      // check the stylesheets folder for css files
      $dir = new DirectoryIterator($ifolder."stylesheets");
      $settings["capture.stylesheets"] = '';
      $settings["capture.mobileStylesheets"] = '';
      $settings["capture.conditionalIEStylesheets"] = '';
      foreach ($dir as $fileinfo) {
        $fn = $fileinfo->getFilename();
        if (!$fileinfo->isDot() && stripos($fn,'.css')) {
          switch (true){
            // if file begins with mobile set is as a mobile style
            case (stripos($fn, 'mobile') === 0):
              $settings["capture.mobileStylesheets"].= "'".$folder."stylesheets/$fn',";
              break;
            // if file begins with ie set is as an IE style
            case (stripos($fn, 'ie') === 0):
                $settings["capture.conditionalIEStylesheets"].= "'".$folder."stylesheets/$fn',";
                break;
            // otherwise set it as a normal style
            default:
                $settings["capture.stylesheets"].= "'".$folder."stylesheets/$fn',";
                break;
          }
        }
      }
    } else {
      $settings["capture.stylesheets"] = "'$base_url/sites/all/themes/janrain-capture-screens/stylesheets/demo.css'";
    }
    
    echo <<<WIDGETCAPTURE
<script id="wjs" type="text/javascript">
function janrainSignOut(){
      janrain.capture.ui.endCaptureSession();
}
(function() {
    if (typeof window.janrain !== 'object') window.janrain = {};
    window.janrain.settings = {};
    window.janrain.settings.capture = {};
    
    // capture settings
    janrain.settings.capture.redirectUri = '{$settings["capture.redirectUri"]}';
    janrain.settings.capture.appId= '{$settings["capture.appId"]}';
    janrain.settings.capture.clientId = '{$settings["capture.clientId"]}';
    janrain.settings.capture.responseType = '{$settings["capture.responseType"]}';
    janrain.settings.capture.captureServer = '{$settings["capture.captureServer"]}';
    janrain.settings.capture.registerFlow = '{$settings["capture.registerFlow"]}';
    janrain.settings.packages = {$settings['packages']};
    
    janrain.settings.capture.setProfileCookie = true;
    janrain.settings.capture.keepProfileCookieAfterLogout = true;
    janrain.settings.capture.setProfileData = true;
    
    // styles
    janrain.settings.capture.stylesheets = [{$settings["capture.stylesheets"]}];
WIDGETCAPTURE;

     //mobile styles
     if($settings["capture.mobileStylesheets"] != ''){ ?>
     
     
    janrain.settings.capture.mobileStylesheets = '<?php echo $settings["capture.mobileStylesheets"] ?>';
    <?php }
    
    //IE styles
     if($settings["capture.conditionalIEStylesheets"] != ''){ ?>

    janrain.settings.capture.conditionalIEStylesheets = '<?php echo $settings["capture.conditionalIEStylesheets"] ?>';
    <?php }
    
    if($settings["capture.recaptchaPublicKey"] != '') {
    echo "
    
    // captcha
    janrain.settings.capture.recaptchaPublicKey = '{$settings["capture.recaptchaPublicKey"]}'";
    }

    ?>
    
 
    // engage settings
    janrain.settings.appUrl = '<?php echo $settings["appUrl"] ?>';
    janrain.settings.tokenAction = 'event';
    <?php
    
    if($settings["capture.backplane"]){ ?>
        
    //backplane settings
    janrain.settings.capture.backplane = <?php echo $settings["capture.backplane"] ?>;
    janrain.settings.capture.backplaneBusName = '<?php echo $settings["capture.backplaneBusName"] ?>';
    // channel expires
    // version
    <?php }
    
    if($settings["capture.federate"]){ ?>
      
    // federate settings
    janrain.settings.capture.federate = <?php echo $settings["capture.federate"] ?>;
    janrain.settings.capture.federateServer = '<?php echo $settings["capture.federateServer"] ?>';
    janrain.settings.capture.federateXdReceiver = '<?php echo $settings["capture.federateXdReceiver"] ?>';
    janrain.settings.capture.federateLogoutUri = '<?php echo $settings["capture.federateLogoutUri"] ?>';
    <?php }

    if(true) {
include_once $ifolder.'settings.php';
    }
    
    if (!isset($_SESSION['janrain_capture_access_token'])) {
      $api = new JanrainCaptureApi();
      $api->refreshAccessToken();
    }
    $access_token = "var access_token = '";
    $access_token .= isset($_SESSION['janrain_capture_access_token']) ? $_SESSION['janrain_capture_access_token'] : "";
    $access_token .= "';";
    echo <<<WIDGETFINISH
    
    function isReady() { janrain.ready = true; };
    if (document.addEventListener) {
        document.addEventListener("DOMContentLoaded", isReady, false);
    } else {
        window.attachEvent('onload', isReady);
    }

    var e = document.createElement('script');
    e.type = 'text/javascript';
    e.id = 'janrainAuthWidget'
    var url = document.location.protocol === 'https:' ? 'https://' : 'http://';
    url += '{$settings["capture.loadJsUrl"]}';
    e.src = url;
    var s = document.getElementsByTagName('script')[0];
    s.parentNode.insertBefore(e, s);
})();
    $access_token
    </script>
WIDGETFINISH;
    if(array_search('user', $ari)==false
        && array_search('public_profile', $ari)==false) {
      include_once $ifolder."signin.php";
    }
  }